[
  {
    "objectID": "03_comparsion_milo.html",
    "href": "03_comparsion_milo.html",
    "title": "04_milo",
    "section": "",
    "text": "library(miloR)\nlibrary(SingleCellExperiment)\nlibrary(scater)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(ggbeeswarm)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(tidyr)"
  },
  {
    "objectID": "03_comparsion_milo.html#clustering-by-type",
    "href": "03_comparsion_milo.html#clustering-by-type",
    "title": "04_milo",
    "section": "Clustering by type",
    "text": "Clustering by type\nFunction to run PCA.\nWe run PCA using three different features: type, state and all, and used distances from PCA to construct K-NN graph.\n\nmyfeature <- list(\"type\", \"state\", NULL)\nrun.PCA <- function(feature) {\n  sce <- cluster(sce, features = feature, \n    xdim = 10, ydim = 10, maxK = 20, seed = 1234)\n  sce <- runDR(sce, \"PCA\", features = feature)\n}\n\nsce.list <- lapply(myfeature, run.PCA)"
  },
  {
    "objectID": "03_comparsion_milo.html#da-analysis",
    "href": "03_comparsion_milo.html#da-analysis",
    "title": "04_milo",
    "section": "DA analysis",
    "text": "DA analysis\nPreparing required variables\n\nmerging_table1 <- \"PBMC8_cluster_merging1.xlsx\"\ndownload.file(file.path(url, merging_table1), \n    destfile = merging_table1, mode = \"wb\")\nmerging_table1 <- read_excel(merging_table1)\nhead(data.frame(merging_table1))\n\n  original_cluster  new_cluster\n1                1 B-cells IgM+\n2                2     surface-\n3                3     NK cells\n4                4  CD8 T-cells\n5                5 B-cells IgM-\n6                6    monocytes\n\nmerging_table1$new_cluster <- factor(merging_table1$new_cluster, \n    levels = c(\"B-cells IgM+\", \"B-cells IgM-\", \"CD4 T-cells\",\n        \"CD8 T-cells\", \"DC\", \"NK cells\", \"monocytes\", \"surface-\"))\n\nei <- metadata(sce)$experiment_info\n(da_formula1 <- createFormula(ei, \n    cols_fixed = \"condition\", \n    cols_random = \"sample_id\"))\n\n$formula\ny ~ condition + (1 | sample_id)\n<environment: 0x7f872c0b97e8>\n\n$data\n   condition sample_id\n1      BCRXL    BCRXL1\n2        Ref      Ref1\n3      BCRXL    BCRXL2\n4        Ref      Ref2\n5      BCRXL    BCRXL3\n6        Ref      Ref3\n7      BCRXL    BCRXL4\n8        Ref      Ref4\n9      BCRXL    BCRXL5\n10       Ref      Ref5\n11     BCRXL    BCRXL6\n12       Ref      Ref6\n13     BCRXL    BCRXL7\n14       Ref      Ref7\n15     BCRXL    BCRXL8\n16       Ref      Ref8\n\n$random_terms\n[1] TRUE\n\n(da_formula2 <- createFormula(ei, \n    cols_fixed = \"condition\", \n    cols_random = c(\"sample_id\", \"patient_id\")))\n\n$formula\ny ~ condition + (1 | sample_id) + (1 | patient_id)\n<environment: 0x7f8724b38908>\n\n$data\n   condition sample_id patient_id\n1      BCRXL    BCRXL1   Patient1\n2        Ref      Ref1   Patient1\n3      BCRXL    BCRXL2   Patient2\n4        Ref      Ref2   Patient2\n5      BCRXL    BCRXL3   Patient3\n6        Ref      Ref3   Patient3\n7      BCRXL    BCRXL4   Patient4\n8        Ref      Ref4   Patient4\n9      BCRXL    BCRXL5   Patient5\n10       Ref      Ref5   Patient5\n11     BCRXL    BCRXL6   Patient6\n12       Ref      Ref6   Patient6\n13     BCRXL    BCRXL7   Patient7\n14       Ref      Ref7   Patient7\n15     BCRXL    BCRXL8   Patient8\n16       Ref      Ref8   Patient8\n\n$random_terms\n[1] TRUE\n\ncontrast <- createContrast(c(0, 1))\ngroup <- factor(ei(sce)$condition)\ndesign <- model.matrix(~ group)\ncolnames(design) <- levels(group)\n\nRun DA analysis function using three features\n\nsce.list <- lapply(sce.list, mergeClusters, k = \"meta20\", \n    table = merging_table1, id = \"merging1\", overwrite = TRUE)\n\nrun.DA <- function(sce, cluster_id){\n  \n  da_res <- diffcyt(sce, \n    formula = da_formula1, contrast = contrast, design = design,\n    analysis_type = \"DA\", method_DA = \"diffcyt-DA-edgeR\",\n    clustering_to_use = cluster_id, verbose = FALSE)\n  \n}\n\ndiffcyt.da_res <- lapply(sce.list, run.DA, cluster_id = \"meta10\")"
  },
  {
    "objectID": "03_comparsion_milo.html#milo",
    "href": "03_comparsion_milo.html#milo",
    "title": "04_milo",
    "section": "Milo",
    "text": "Milo\nPreparing traj_design\n\nprepare.traj_design <- function(traj_milo){\n  traj_design <- data.frame(colData(traj_milo))[,c(\"sample_id\", \"condition\")]\n  traj_design <- distinct(traj_design)\n  traj_design$sample_id <- colnames(nhoodCounts(traj_milo))\n  traj_design$condition <- str_sub(traj_design$sample_id, 1, str_length(traj_design$sample_id)-1)\n  rownames(traj_design) <- traj_design$sample_id\n  return(traj_design)\n}\n\nRun milo\n\nrun.Milo <- function(sce){\n  traj_milo <- Milo(sce)\n  reducedDim(traj_milo, \"PCA\") <- reducedDim(sce, \"PCA\")\n  # Defining representative neighbourhoods\n  traj_milo <- buildGraph(traj_milo, d = 9)\n  traj_milo <- makeNhoods(traj_milo, d = 9)\n  # Counting cells in neighbourhoods\n  traj_milo <- countCells(traj_milo, meta.data = colData(traj_milo), sample=\"sample_id\")\n  traj_milo <- calcNhoodDistance(traj_milo, d=9)\n}\ntraj_milo.list <- lapply(sce.list, run.Milo)\n\nannotate.Cluster_id <- function(traj_milo, sce){\n   traj_design <- prepare.traj_design(traj_milo)\n   da_res <- testNhoods(traj_milo, design = ~ condition, design.df = traj_design)\n   colData(traj_milo)$meta10 <- cluster_ids(sce, \"meta10\")\n   da_res <- annotateNhoods(traj_milo, da.res = da_res, coldata_col = \"meta10\")\n   return(da_res)\n}\n\nmilo.da_res <- list()\nfor(i in 1:3){\n  milo.da_res[[i]] <- annotate.Cluster_id(traj_milo.list[[i]], sce.list[[i]])\n}\n\nComparison by logFC using mean\n\nplot.logFC <- function(milo.da_res, diffcyt.da_res){\n  milo.da_res$color <- \"grey\"\n  milo.da_res[milo.da_res$logFC > 1, ]$color <- \"#F76D5E\"\n  milo.da_res[milo.da_res$logFC < -1, ]$color <- \"#3FA0FF\"\n  diffcyt.da_res$meta10 <- diffcyt.da_res$cluster_id\n  ggplot(milo.da_res, aes(x=meta10, y = logFC, color=milo.da_res$color)) + geom_quasirandom(alpha=.3,varwidth=TRUE) +  stat_summary(fun.y=mean, geom=\"point\", shape=8, size=3, color=\"black\") + geom_point(data=data.frame(diffcyt.da_res), mapping = aes(x=meta10, y=logFC), pch=16, color=\"black\") + scale_colour_identity() + geom_hline(yintercept=1,linetype=2) + geom_hline(yintercept= -1,linetype=2)\n}\n#+ geom_point(data=data.frame(diffcyt.da_res), mapping = aes(x=merging1, y=logFC))\n\np1 <- plot.logFC(milo.da_res[[1]], rowData(diffcyt.da_res[[1]]$res))\np2 <- plot.logFC(milo.da_res[[2]], rowData(diffcyt.da_res[[2]]$res))\np3 <- plot.logFC(milo.da_res[[3]], rowData(diffcyt.da_res[[3]]$res))\np1\n\n\n\np2\n\n\n\np3\n\n\n\n\nComparison by P-value\n\nplot.PValue <- function(milo.da_res, diffcyt.da_res){\n  diffcyt.da_res$meta10 <- diffcyt.da_res$cluster_id\n  milo.da_res$logPValue <- -log(milo.da_res$PValue)\n  diffcyt.da_res$logPValue <- -log(diffcyt.da_res$p_adj)\n  p<-ggplot(milo.da_res, aes(x=meta10, y=logPValue, color=meta10)) +\n  geom_violin(trim=FALSE) + stat_summary(fun.y=mean, geom=\"point\", shape=23, size=2) + geom_point(data=data.frame(diffcyt.da_res), mapping = aes(x=meta10, y=logPValue))\n}\n\np1 <- plot.PValue(milo.da_res[[1]], rowData(diffcyt.da_res[[1]]$res))\np2 <- plot.PValue(milo.da_res[[2]], rowData(diffcyt.da_res[[2]]$res))\np3 <- plot.PValue(milo.da_res[[3]], rowData(diffcyt.da_res[[3]]$res))\np1\n\n\n\np2\n\n\n\np3\n\n\n\n\nPlot p-value distribution\n\n# Using Small multiple\n\nplot.PValue_dist <- function(milo.da_res, diffcyt.da_res){\n  milo.da_res$logPValue <- -log(milo.da_res$PValue)\n  da_res <- data.frame(diffcyt.da_res)\n  da_res$logPValue <- -log(da_res$p_adj)\n  da_res$meta10 <- da_res$cluster_id\n  p <- ggplot(data=milo.da_res, aes(x=logPValue, group=meta10, fill=meta10)) +\n      geom_density(adjust=1.5) +\n      facet_wrap(~meta10) +\n      geom_vline(data = da_res, mapping = aes(xintercept = logPValue, group=meta10), linetype=\"dashed\") + geom_vline(xintercept = -log(0.05), linetype=\"dashed\", color = \"blue\") +\n    theme(\n        legend.position=\"none\",\n        panel.spacing = unit(0.1, \"lines\"),\n        axis.ticks.x=element_blank() \n      ) \n    \n}\n\np1 <- plot.PValue_dist(milo.da_res[[1]], rowData(diffcyt.da_res[[1]]$res))\np2 <- plot.PValue_dist(milo.da_res[[2]], rowData(diffcyt.da_res[[2]]$res))\np3 <- plot.PValue_dist(milo.da_res[[3]], rowData(diffcyt.da_res[[3]]$res))\np1\n\n\n\np2\n\n\n\np3"
  },
  {
    "objectID": "00_data.html",
    "href": "00_data.html",
    "title": "00_Data",
    "section": "",
    "text": "library(CATALYST)\n\nLoading required package: SingleCellExperiment\n\n\nLoading required package: SummarizedExperiment\n\n\nLoading required package: MatrixGenerics\n\n\nLoading required package: matrixStats\n\n\nWarning: package 'matrixStats' was built under R version 4.1.2\n\n\n\nAttaching package: 'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\nLoading required package: GenomicRanges\n\n\nWarning: package 'GenomicRanges' was built under R version 4.1.2\n\n\nLoading required package: stats4\n\n\nLoading required package: BiocGenerics\n\n\n\nAttaching package: 'BiocGenerics'\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, append, as.data.frame, basename, cbind, colnames,\n    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,\n    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,\n    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,\n    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,\n    union, unique, unsplit, which.max, which.min\n\n\nLoading required package: S4Vectors\n\n\nWarning: package 'S4Vectors' was built under R version 4.1.3\n\n\n\nAttaching package: 'S4Vectors'\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\nLoading required package: IRanges\n\n\nLoading required package: GenomeInfoDb\n\n\nWarning: package 'GenomeInfoDb' was built under R version 4.1.2\n\n\nLoading required package: Biobase\n\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\nAttaching package: 'Biobase'\n\n\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n\nlibrary(cowplot)\nlibrary(flowCore)\n\n\nAttaching package: 'flowCore'\n\n\nThe following object is masked from 'package:BiocGenerics':\n\n    normalize\n\nlibrary(diffcyt)\nlibrary(scater)\n\nLoading required package: scuttle\n\n\nLoading required package: ggplot2\n\n\nWarning: package 'ggplot2' was built under R version 4.1.2\n\n\n\nAttaching package: 'scater'\n\n\nThe following object is masked from 'package:diffcyt':\n\n    plotHeatmap\n\nlibrary(SingleCellExperiment)\n\n\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.1.2\n\nurl <- \"http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow\"\nmd <- \"PBMC8_metadata.xlsx\"\ndownload.file(file.path(url, md), destfile = md, mode = \"wb\")\nmd <- read_excel(md)\nhead(data.frame(md))\n\n                           file_name sample_id condition patient_id\n1    PBMC8_30min_patient1_BCR-XL.fcs    BCRXL1     BCRXL   Patient1\n2 PBMC8_30min_patient1_Reference.fcs      Ref1       Ref   Patient1\n3    PBMC8_30min_patient2_BCR-XL.fcs    BCRXL2     BCRXL   Patient2\n4 PBMC8_30min_patient2_Reference.fcs      Ref2       Ref   Patient2\n5    PBMC8_30min_patient3_BCR-XL.fcs    BCRXL3     BCRXL   Patient3\n6 PBMC8_30min_patient3_Reference.fcs      Ref3       Ref   Patient3\n\n\n\nlibrary(HDCytoData)\n\nLoading required package: ExperimentHub\n\n\nLoading required package: AnnotationHub\n\n\nLoading required package: BiocFileCache\n\n\nLoading required package: dbplyr\n\n\nWarning: package 'dbplyr' was built under R version 4.1.2\n\n\n\nAttaching package: 'AnnotationHub'\n\n\nThe following object is masked from 'package:Biobase':\n\n    cache\n\n\nsnapshotDate(): 2021-05-18\n\nfs <- Bodenmiller_BCR_XL_flowSet()\n\nsee ?HDCytoData and browseVignettes('HDCytoData') for documentation\n\n\nloading from cache\n\n\n\npanel <- \"PBMC8_panel_v3.xlsx\"\ndownload.file(file.path(url, panel), destfile = panel, mode = \"wb\")\npanel <- read_excel(panel)\nhead(data.frame(panel))\n\n     fcs_colname antigen marker_class\n1 CD3(110:114)Dd     CD3         type\n2  CD45(In115)Dd    CD45         type\n3 pNFkB(Nd142)Dd   pNFkB        state\n4  pp38(Nd144)Dd    pp38        state\n5   CD4(Nd145)Dd     CD4         type\n6  CD20(Sm147)Dd    CD20         type\n\nall(panel$fcs_colname %in% colnames(fs))\n\n[1] TRUE\n\n\n\nlibrary(flowCore)\nlibrary(CATALYST)\nmd$condition <- factor(md$condition, levels = c(\"Ref\", \"BCRXL\"))\nmd$sample_id <- factor(md$sample_id, \n    levels = md$sample_id[order(md$condition)])\ndata(PBMC_fs, PBMC_panel, PBMC_md)\n# construct SingleCellExperiment\nsce <- prepData(fs, panel, md, features = panel$fcs_colname)"
  }
]